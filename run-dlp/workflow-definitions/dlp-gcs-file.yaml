# Sample input {"project":"uri-test","pubSubTopic":"workflows-demo","zone":"us-central1-a","timeInterval":"10","body":{"description":"Demo","name":"gce","specificReservation":{"count":1,"instanceProperties":{"machineType":"n1-standard-2"}}}}
main:
    params: [args]
    steps:
    - initVariables:
        assign:
        - project: 'uri-test'
        - topic: 'workflows-demo'
        - timeInterval: '5'
    - Create DLP Job:
        call: http.post
        args:
            url: https://us-central1-uri-test.cloudfunctions.net/DlpInspectGcsFile
            auth:
                type: OIDC
            body:
                project: ${project}
                bucket: ${args.bucket}
                filename: ${args.name}
        result: ResultCreate
    - Get DLP Job Status:
        call: http.post
        args:
            url: https://us-central1-uri-test.cloudfunctions.net/DlpInspectJobStatus
            auth:
                type: OIDC
            body:
                name: ${ResultCreate.body.name}
        result: ResultStatus    
    - Check Job Status:
        switch:
            - condition: ${ResultStatus.body.state=="DONE"}
              next: Publish To PubSub
        next: Wait for Job Result      
    - Wait for Job Result:
        call: sys.sleep
        args:
            seconds: ${int(timeInterval)}
        next: Publish 5 seconds To PubSub    
    - Publish 5 seconds To PubSub:
        call: googleapis.pubsub.v1.projects.topics.publish
        args:
            topic: ${"projects/" + project + "/topics/" + topic}
            body:
                messages:
                    # - data: ${base64.encode(text.encode(message))}
                    - data: ${base64.encode(text.encode("Waiting" + timeInterval + " seconds message"))}
        result: publishResult
        next: Get DLP Job Status    
    - Publish To PubSub:
        call: googleapis.pubsub.v1.projects.topics.publish
        args:
            topic: ${"projects/" + project + "/topics/" + topic}
            body:
                messages:
                    # - data: ${base64.encode(text.encode(message))}
                    - data: ${base64.encode(text.encode("Publish To PubSub message"))}
        result: publishResult
        next: returnValue
    - returnValue:
        return: ${ResultStatus.body.state}